[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "mouse",
        "importPath": "pynput",
        "description": "pynput",
        "isExtraImport": true,
        "detail": "pynput",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "importPath": "pynput",
        "description": "pynput",
        "isExtraImport": true,
        "detail": "pynput",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "ctypes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ctypes",
        "description": "ctypes",
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "fitz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fitz",
        "description": "fitz",
        "detail": "fitz",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "docx",
        "description": "docx",
        "isExtraImport": true,
        "detail": "docx",
        "documentation": {}
    },
    {
        "label": "ClickCounter",
        "kind": 6,
        "importPath": "clickcounter",
        "description": "clickcounter",
        "peekOfCode": "class ClickCounter:\n    def __init__(self, max_buttons=10):\n        self.max_buttons = max_buttons\n        self.click_counts = {button: 0 for button in range(1, max_buttons + 1)}\n        self.listener = None\n        self.running = False\n        self.log_file = \"click_counts.log\"\n    def on_click(self, x, y, button, pressed):\n        if pressed:\n            button_index = button.value",
        "detail": "clickcounter",
        "documentation": {}
    },
    {
        "label": "KeyLogger",
        "kind": 6,
        "importPath": "keylogger",
        "description": "keylogger",
        "peekOfCode": "class KeyLogger:\n    def __init__(self, log_file=\"key_log.txt\"):\n        self.log_file = log_file\n        self.listener = None\n        self.last_active_window = None\n    def get_active_window_title(self):\n        window_title = None\n        try:\n            hwnd = ctypes.windll.user32.GetForegroundWindow()\n            if hwnd != 0:",
        "detail": "keylogger",
        "documentation": {}
    },
    {
        "label": "pdf_to_word",
        "kind": 2,
        "importPath": "pdf_to_word",
        "description": "pdf_to_word",
        "peekOfCode": "def pdf_to_word(pdf_path, word_path):\n    # Open the PDF file\n    pdf_document = fitz.open(pdf_path)\n    # Create a new Word document\n    word_document = Document()\n    for page_num in range(len(pdf_document)):\n        # Get the page\n        page = pdf_document.load_page(page_num)\n        # Extract text from the page\n        text = page.get_text(\"text\")",
        "detail": "pdf_to_word",
        "documentation": {}
    },
    {
        "label": "pdf_path",
        "kind": 5,
        "importPath": "pdf_to_word",
        "description": "pdf_to_word",
        "peekOfCode": "pdf_path = 'example.pdf'\nword_path = 'output.docx'\npdf_to_word(pdf_path, word_path)",
        "detail": "pdf_to_word",
        "documentation": {}
    },
    {
        "label": "word_path",
        "kind": 5,
        "importPath": "pdf_to_word",
        "description": "pdf_to_word",
        "peekOfCode": "word_path = 'output.docx'\npdf_to_word(pdf_path, word_path)",
        "detail": "pdf_to_word",
        "documentation": {}
    }
]